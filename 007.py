import requests
import time
from thefuzz import process
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich.align import Align
from rich import box
import socket
import whois
import random 
import hashlib
import os
from bs4 import BeautifulSoup
import folium
import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.pyplot as plt
from textblob import TextBlob
import pytesseract
from PIL import Image


console = Console()

headers = {
    "User-Agent": "Mozilla/5.0"
}
TMDB_API_KEY = "06040157f20d0bae45f3bee7bf57566a"  # Ta cl√© API TMDb
TMDB_BASE_URL = "https://api.themoviedb.org/3"
VT_API_KEY = "03caee030cc5a4b3b0dbf536a33c4c849fd3adad06d3f3297df3c2e56ace3fae"  # Remplace par ta cl√© API r√©elle

def tmdb_request(endpoint, params):
    params["api_key"] = TMDB_API_KEY
    url = f"{TMDB_BASE_URL}{endpoint}"
    try:
        r = requests.get(url, params=params, timeout=10)
        if r.status_code == 200:
            return r.json()
        else:
            console.print(f"[red]Erreur API TMDb: {r.status_code}[/red]")
            return None
    except Exception as e:
        console.print(f"[red]Erreur requ√™te TMDb : {e}[/red]")
        return None

import requests

def get_nitro_global_stats():
    """Estimation du nombre d'abonn√©s Discord Nitro dans le monde"""
    console.print("[bold cyan]\n====== Nitro Global Stats ======[/bold cyan]")

    # Discord a environ 150M d'utilisateurs actifs
    discord_users = 150_000_000  

    # Estimation : 1 √† 3% des utilisateurs prennent Nitro
    nitro_basic = int(discord_users * 0.01)
    nitro_premium = int(discord_users * 0.02)

    console.print(f"\nüìä **Estimations des abonn√©s Nitro :**")
    console.print(f"üíé **Nitro Basic :** ~{nitro_basic:,} abonn√©s")
    console.print(f"üöÄ **Nitro Premium :** ~{nitro_premium:,} abonn√©s")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def create_map():
    """ G√©n√®re une carte interactive avec des points g√©olocalis√©s """
    m = folium.Map(location=[48.8566, 2.3522], zoom_start=6)  # Coordonn√©es de Paris
    
    # Exemple : Ajout de points d‚Äôint√©r√™t
    locations = [
        {"name": "Tour Eiffel", "lat": 48.8584, "lon": 2.2945},
        {"name": "Louvre", "lat": 48.8606, "lon": 2.3376},
        {"name": "Notre-Dame", "lat": 48.8527, "lon": 2.3500},
    ]
    
    for loc in locations:
        folium.Marker([loc["lat"], loc["lon"]], popup=loc["name"], icon=folium.Icon(color="blue")).add_to(m)

    m.save("map.html")  # Enregistre la carte sous forme de fichier HTML

    console.print("[green]‚úÖ Carte cr√©√©e ! Ouvre 'map.html' pour voir les points g√©olocalis√©s.[/green]")

def create_network_graph():
    """ G√©n√®re un graphique de r√©seau montrant les connexions entre individus """
    G = nx.Graph()

    # Exemple : Ajout de connexions entre personnes
    relations = [
        ("Alice", "Bob"),
        ("Bob", "Charlie"),
        ("Alice", "Charlie"),
        ("Charlie", "David"),
        ("David", "Eve"),
    ]

    G.add_edges_from(relations)

    plt.figure(figsize=(8,6))
    nx.draw(G, with_labels=True, node_color="lightblue", edge_color="gray", node_size=2000, font_size=12)
    plt.title("Graphique de r√©seau")
    plt.show()

    console.print("[green]‚úÖ Graphique g√©n√©r√© ![/green]")

def create_dashboard():
    """ G√©n√®re un dashboard avec des KPIs """
    data = {
        "Cat√©gorie": ["Mentions", "Influenceurs", "Sources Fiables", "Fuites d√©tect√©es"],
        "Valeur": [1520, 45, 180, 27]
    }

    df = pd.DataFrame(data)

    plt.figure(figsize=(8,6))
    plt.barh(df["Cat√©gorie"], df["Valeur"], color="blue")
    plt.xlabel("Valeur")
    plt.title("Dashboard - KPIs de l'analyse OSINT")
    plt.show()

    console.print("[green]‚úÖ Dashboard g√©n√©r√© avec succ√®s ![/green]")

def global_nitro_stat_server(invite_code):
    """R√©cup√®re les membres Nitro sur un serveur Discord via l‚Äôinvitation"""
    console.print("[bold cyan]\n====== Global Nitro Stat Serveur ======[/bold cyan]")
    
    headers = {"Authorization": "Bot VOTRE_BOT_TOKEN"}
    response = requests.get(f"https://discord.com/api/v10/invites/{invite_code}?with_counts=true", headers=headers)

    if response.status_code == 200:
        data = response.json()
        server_name = data["guild"]["name"]
        boost_count = data["guild"]["premium_subscription_count"]
        member_count = data["approximate_member_count"]

        console.print(f"\nüè∞ **Serveur :** {server_name}")
        console.print(f"üë• **Total membres :** {member_count}")
        console.print(f"üöÄ **Boosters Nitro (Nitro Premium) :** {boost_count}")
        
        # On peut aussi d√©tecter les membres ayant un r√¥le "Nitro" si le serveur en a un
        console.print("[yellow]üîç V√©rifie si le serveur attribue un r√¥le Nitro pour d√©tecter les Nitro Basic ![/yellow]")
    
    else:
        console.print("[red]‚ùå Erreur : Impossible d'obtenir les infos du serveur.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def search_titles_approximate(query, media_type="movie", limit=10):
    data = tmdb_request(f"/search/{media_type}", {"query": query, "language": "fr-FR", "page": 1})
    if not data or "results" not in data:
        return []
    results = data["results"]
    titles = [r.get("title") or r.get("name") for r in results]
    best_matches = process.extract(query, titles, limit=limit)

    filtered_results = []
    for title, score in best_matches:
        idx = titles.index(title)
        if score >= 60:
            filtered_results.append(results[idx])
    return filtered_results

def get_watch_providers(media_type, tmdb_id, country="FR"):
    data = tmdb_request(f"/{media_type}/{tmdb_id}/watch/providers", {})
    if not data or "results" not in data:
        return []

    country_info = data["results"].get(country)
    if not country_info:
        return []

    providers = country_info.get("flatrate") or country_info.get("rent") or country_info.get("buy")
    if not providers:
        return []

    return [p["provider_name"] for p in providers]

def print_header():
    title = Text("007 OSINT", style="bold red", justify="center")
    subtitle = Text("Created by KRATORAK", style="italic green", justify="center")
    panel = Panel(Align.center(Text.assemble(title, "\n", subtitle)), style="bold blue", box=box.DOUBLE)
    console.print(panel)

def clear_console():
    """Efface le terminal pour un affichage propre"""
    os.system("cls" if os.name == "nt" else "clear")

def website_vulnerability_scanner():
    print_header()
    console.print("[bold cyan]\n====== Website Vulnerability Scanner ======[/bold cyan]")

    url = console.input("üîó Entrez l'URL du site √† scanner : ").strip()

    try:
        response = requests.get(url)
        console.print(f"\nüîç Analyse de [bold yellow]{url}[/bold yellow]...\n")
        console.print(f"üîπ Code HTTP : {response.status_code}")

        # V√©rifier les headers de s√©curit√©
        security_headers = ["Strict-Transport-Security", "X-Frame-Options", "X-XSS-Protection", "Content-Security-Policy"]
        for header in security_headers:
            if header in response.headers:
                console.print(f"[green]‚úÖ {header} pr√©sent[/green]")
            else:
                console.print(f"[red]‚ùå {header} manquant[/red]")

        # D√©tection des erreurs SQL
        sql_errors = ["mysql_fetch_array()", "You have an error in your SQL syntax", "Error executing SQL", "Undefined index"]
        for error in sql_errors:
            if error in response.text:
                console.print(f"[red]‚ùó Potentielle vuln√©rabilit√© SQL trouv√©e : {error}[/red]")

        # Analyse des formulaires HTML
        soup = BeautifulSoup(response.text, "html.parser")
        forms = soup.find_all("form")
        console.print(f"\nüîé Nombre de formulaires d√©tect√©s : {len(forms)}")
        if forms:
            console.print("[yellow]‚ö†Ô∏è V√©rifie si les entr√©es sont bien filtr√©es contre l‚Äôinjection SQL.[/yellow]")

        # V√©rification des ports ouverts
        domain = url.replace("https://", "").replace("http://", "").split("/")[0]
        common_ports = [21, 22, 23, 25, 53, 80, 443, 3306, 8080]  # Ports classiques
        console.print("\nüîé Scan rapide des ports ouverts...")

        for port in common_ports:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            result = sock.connect_ex((domain, port))
            if result == 0:
                console.print(f"[red]‚ùå Port ouvert d√©tect√© : {port}[/red]")
            sock.close()

    except requests.exceptions.RequestException as e:
        console.print(f"[red]‚ùå Erreur lors de l'analyse : {e}[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def social_check_tool():
    print_header()
    console.print("[bold cyan]=== V√©rification multi-r√©seaux sociaux ===[/bold cyan]\n")
    username = console.input("üßë‚Äçüíª Entrez le pseudo √† v√©rifier : ").strip()

    # Dictionnaire des sites sociaux classiques avec URL format√©es
    sites = {
        # r√©seaux sociaux classiques
        "Twitter": f"https://twitter.com/{username}",
        "Instagram": f"https://www.instagram.com/{username}/",
        "Facebook": f"https://www.facebook.com/{username}",
        "TikTok": f"https://www.tiktok.com/@{username}",
        "GitHub": f"https://github.com/{username}",
        "Reddit": f"https://www.reddit.com/user/{username}",
        "LinkedIn": f"https://www.linkedin.com/in/{username}",
        "Pinterest": f"https://www.pinterest.com/{username}/",
        "Twitch": f"https://www.twitch.tv/{username}",
        "Steam": f"https://steamcommunity.com/id/{username}/",
        "Snapchat": f"https://www.snapchat.com/add/{username}",
        "Medium": f"https://medium.com/@{username}",
        "Dribbble": f"https://dribbble.com/{username}",
        "SoundCloud": f"https://soundcloud.com/{username}",
        "DeviantArt": f"https://www.deviantart.com/{username}",
        "Vimeo": f"https://vimeo.com/{username}",
        "Behance": f"https://www.behance.net/{username}",
        "Flickr": f"https://www.flickr.com/people/{username}",
        "Goodreads": f"https://www.goodreads.com/{username}",
        "Letterboxd": f"https://letterboxd.com/{username}",
        "Discogs": f"https://www.discogs.com/user/{username}",
        "Twitch": f"https://www.twitch.tv/{username}",
        "Patreon": f"https://www.patreon.com/{username}",
        "WhatsApp": f"https://wa.me/{username}",  # souvent num√©ro, mais on teste
        "Telegram": f"https://t.me/{username}",
        "Stack Overflow": f"https://stackoverflow.com/users/{username}",
        "Quora": f"https://www.quora.com/profile/{username}",
        "AngelList": f"https://angel.co/u/{username}",
        "CodePen": f"https://codepen.io/{username}",
        "Xing": f"https://www.xing.com/profile/{username}",
        "VK": f"https://vk.com/{username}",
        "Ok.ru": f"https://ok.ru/{username}",
        "Myspace": f"https://myspace.com/{username}",
        "SoundClick": f"https://www.soundclick.com/{username}",
    }

    # Deep web - sites onion connus, en mode "statique" (pas vraiment checkable sans TOR)
    deep_web_sites = {
        "Facebook (Onion)": "https://www.facebookcorewwwi.onion/",
        "DuckDuckGo (Onion)": "https://3g2upl4pq6kufc4m.onion/",
        "ProtonMail (Onion)": "https://protonirockerxow.onion/",
        "Riseup (Onion)": "https://5jp7xtm5tb4xqoz3.onion/",
        "Tor Metrics (Onion)": "http://rougmnvswfsmd4dq.onion/",
    }

    console.print(f"\nüîé Recherche du pseudo [bold yellow]{username}[/bold yellow] sur plusieurs plateformes classiques...\n")

    for site, url in sites.items():
        try:
            r = requests.head(url, headers=headers, allow_redirects=True, timeout=5)
            if r.status_code == 200:
                console.print(f"[green]‚úî {site} trouv√© :[/green] [blue underline]{url}[/blue underline]")
            else:
                console.print(f"[red]‚úò {site} non trouv√©[/red]")
        except Exception as e:
            console.print(f"[red]‚ö† {site} erreur : {e}[/red]")

    console.print("\n[bold cyan]=== Deep Web (sites .onion connus) ===[/bold cyan]")
    for site, url in deep_web_sites.items():
        console.print(f"üîó {site} : [magenta]{url}[/magenta]")

    console.print("\n[bold magenta]Recherche termin√©e.[/bold magenta]\n")
    console.input("Appuyez sur Entr√©e pour revenir au menu...")

def generate_random_ip():
    """G√©n√®re une adresse IPv4 al√©atoire"""
    return f"{random.randint(1, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"


def get_valid_ip():
    """R√©cup√®re une vraie adresse IP publique"""
    try:
        response = requests.get("https://api.ipify.org?format=json")
        if response.status_code == 200:
            return response.json()["ip"]
        else:
            return None
    except Exception:
        return None

def generate_valid_ip():
    """G√©n√®re une adresse IP publique r√©aliste"""
    # S√©lection d'un bloc d'IP utilis√© par les ISP (non-r√©serv√©)
    first_octet = random.choice([1, 2, 3, 5, 23, 45, 57, 78, 89, 100, 123, 150, 176, 198, 203, 210, 220])
    return f"{first_octet}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"



def ip_generator():
    print_header()
    console.print("[bold cyan]\n====== IP GENERATOR ======[/bold cyan]")

    # Entr√©e du webhook Discord
    webhook_url = console.input("\nüîó Entrez votre webhook Discord : ").strip()

    # Nombre d'IP √† g√©n√©rer
    num_ips = console.input("üíª Combien d'IP veux-tu g√©n√©rer ? ").strip()

    try:
        num_ips = int(num_ips)
        if num_ips <= 0:
            console.print("[red]‚ùå Nombre invalide ![/red]")
            return
    except ValueError:
        console.print("[red]‚ùå Tu dois entrer un nombre valide ![/red]")
        return

    generated_ips = []

    for _ in range(num_ips):
        ip = generate_valid_ip()  # G√©n√©ration correcte d'IP al√©atoire IPv4
        generated_ips.append(ip)
        console.print(f"‚úÖ IP g√©n√©r√©e : [bold yellow]{ip}[/bold yellow]")

    # Envoi des IP sur Discord via le webhook
    data = {"content": "**IP GENERATOR - R√©sultats :**\n" + "\n".join(generated_ips)}
    requests.post(webhook_url, json=data)

    console.print("\nüöÄ Toutes les IP al√©atoires ont √©t√© envoy√©es sur Discord !")
    console.input("üîÑ Appuie sur Entr√©e pour revenir au menu...")

def osint_film_serie():
    console.clear()
    title = Text("007 OSINT", style="bold red", justify="center")
    subtitle = Text("Created by KRATORAK", style="italic green", justify="center")
    panel = Panel(Align.center(Text.assemble(title, "\n", subtitle)), style="bold blue", box=box.DOUBLE)
    console.print(panel)

    query = console.input("\nüé• Entrez le nom du film ou s√©rie : ").strip()
    console.print("\nüîç Recherche approximative...")

    movies = search_titles_approximate(query, "movie", limit=5)
    series = search_titles_approximate(query, "tv", limit=5)

    console.print(f"\n[bold yellow]{len(movies)} films trouv√©s[/bold yellow]")
    console.print(f"[bold yellow]{len(series)} s√©ries trouv√©es[/bold yellow]\n")

    def print_info(results, media_type):
        for i, res in enumerate(results, 1):
            title = res.get("title") or res.get("name")
            release_date = res.get("release_date") or res.get("first_air_date") or "N/A"
            tmdb_id = res.get("id")
            providers = get_watch_providers(media_type, tmdb_id)
            providers_str = ", ".join(providers) if providers else "Non disponible"
            console.print(f"[cyan]{i}. {title}[/cyan] ({release_date})")
            console.print(f"    Plateformes disponibles: [green]{providers_str}[/green]\n")

    if movies:
        console.print("[bold underline]Films :[/bold underline]")
        print_info(movies, "movie")

    if series:
        console.print("[bold underline]S√©ries :[/bold underline]")
        print_info(series, "tv")

    if not movies and not series:
        console.print("[red]Aucun r√©sultat trouv√© pour votre recherche.[/red]")

    console.input("\nüîÑ Appuyez sur Entr√©e pour revenir au menu...")



def get_domain_info():
    domain = console.input("üåê Entrez un nom de domaine : ").strip()
    console.print(f"\nüåê Analyse du domaine : [bold yellow]{domain}[/bold yellow]\n")

    try:
        ip = socket.gethostbyname(domain)
        console.print(f"üñ•Ô∏è Adresse IP : {ip}")
    except socket.gaierror:
        console.print("[red]Impossible de r√©soudre l'IP.[/red]")

    try:
        w = whois.whois(domain)
        console.print(f"üìÖ Expiration du domaine : {w.expiration_date}")
        console.print(f"üë§ Propri√©taire : {w.name} ({w.org})")
        console.print(f"üì© Email WHOIS : {w.emails}")
    except Exception as e:
        console.print(f"[red]Erreur WHOIS : {e}[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def check_url_vt():
    url = console.input("üîó Entrez une URL √† analyser : ").strip()
    console.print(f"\nüîç Analyse de l'URL : [bold yellow]{url}[/bold yellow]\n")
    headers = {"x-apikey": VT_API_KEY}
    r = requests.get(f"https://www.virustotal.com/api/v3/urls/{url}", headers=headers)

    if r.status_code == 200:
        json_data = r.json()
        score = json_data["data"]["attributes"]["last_analysis_stats"]
        console.print(f"ü¶† D√©tections : {score}")
    else:
        console.print("[red]Erreur VirusTotal[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def discord_token_info():
    print_header()
    console.print("[bold cyan]\n====== Discord Token Info ======[/bold cyan]")
    token = console.input("üîë Entrez le token Discord : ").strip()

    headers = {"Authorization": token}
    r = requests.get("https://discord.com/api/v10/users/@me", headers=headers)

    if r.status_code == 200:
        user_data = r.json()
        console.print(f"\nüë§ Nom : {user_data['username']}#{user_data['discriminator']}")
        console.print(f"üÜî ID Discord : {user_data['id']}")
    else:
        console.print("[red]‚ùå Token invalide ou erreur.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def discord_webhook_info():
    print_header()
    console.print("[bold cyan]\n====== Discord Webhook Info ======[/bold cyan]")
    webhook_url = console.input("üîó Entrez l'URL du webhook Discord : ").strip()

    r = requests.get(webhook_url)

    if r.status_code == 200:
        webhook_data = r.json()
        console.print(f"\nüîß Nom du webhook : {webhook_data['name']}")
        console.print(f"üìç Serveur ID : {webhook_data['guild_id']}")
        console.print(f"üí¨ Channel ID : {webhook_data['channel_id']}")
    else:
        console.print("[red]‚ùå Webhook invalide ou erreur.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def discord_webhook_generator():
    print_header()
    console.print("[bold cyan]\n====== Discord Webhook Generator ======[/bold cyan]")
    webhook_url = console.input("üîó Entrez le webhook Discord : ").strip()
    message = console.input("üí¨ Entrez le message √† envoyer : ").strip()

    data = {"content": message}
    r = requests.post(webhook_url, json=data)

    if r.status_code == 204:
        console.print("[green]‚úÖ Message envoy√© avec succ√®s ![/green]")
    else:
        console.print("[red]‚ùå Erreur lors de l‚Äôenvoi du message.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def discord_server_info():
    """ R√©cup√®re les infos d'un serveur Discord via son lien d'invitation """
    print_header()
    console.print("[bold cyan]\n====== Discord Server Info ======[/bold cyan]")

    invite_code = console.input("üîó Entrez l'invitation du serveur Discord : ").strip()
    invite_code = invite_code.split("/")[-1]  # R√©cup√®re juste le code d'invitation

    headers = {"Authorization": "Bot VOTRE_BOT_TOKEN"}
    response = requests.get(f"https://discord.com/api/v10/invites/{invite_code}?with_counts=true", headers=headers)

    if response.status_code == 200:
        data = response.json()
        server_name = data["guild"]["name"]
        member_count = data["approximate_member_count"]
        online_count = data["approximate_presence_count"]

        console.print(f"\nüè∞ **Serveur :** {server_name}")
        console.print(f"üë• **Membres :** {member_count}")
        console.print(f"üü¢ **Membres en ligne :** {online_count}")

    else:
        console.print("[red]‚ùå Erreur : Invitation invalide ou impossible d'obtenir les infos du serveur.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def get_ip_location():
    ip = console.input("üíª Entrez une adresse IP : ").strip()
    console.print(f"\nüìç G√©olocalisation de l'IP : [bold yellow]{ip}[/bold yellow]\n")

    r = requests.get(f"https://ipinfo.io/{ip}/json")
    if r.status_code == 200:
        data = r.json()
        console.print(f"üèôÔ∏è Ville : {data.get('city', 'Inconnue')}")
        console.print(f"üåé Pays : {data.get('country', 'Inconnu')}")
        console.print(f"üó∫Ô∏è R√©gion : {data.get('region', 'Inconnue')}")
        console.print(f"üì° ISP : {data.get('org', 'Inconnu')}")
    else:
        console.print("[red]Impossible d'obtenir des infos sur l'IP.[/red]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")

def data_scraping_osint():
    """ Scraping d‚Äôinfos sur un sujet (Wikipedia + Google News) """
    console.print("[cyan]üîç Recherche OSINT sur un sujet[/cyan]")
    query = console.input("üîé Entrez un sujet : ").strip()

    # Scraping Wikipedia
    wiki_url = f"https://fr.wikipedia.org/wiki/{query.replace(' ', '_')}"
    try:
        response = requests.get(wiki_url)
        soup = BeautifulSoup(response.text, "html.parser")
        intro = soup.find("p").text
        console.print(f"üìÑ Wikipedia : {intro[:300]}...\nüîó {wiki_url}")
    except:
        console.print("‚ùå Impossible d'extraire Wikipedia.")

    # Scraping Google News
    news_url = f"https://www.google.com/search?q={query.replace(' ', '+')}&tbm=nws"
    console.print(f"üì∞ Articles sur Google News : {news_url}")



def sentiment_analysis():
    """ Analyse du sentiment d‚Äôun texte (positif, neutre, n√©gatif) """
    console.print("[cyan]üí¨ Analyse de Sentiment d‚Äôun texte[/cyan]")
    text = console.input("üìù Entrez le texte √† analyser : ")

    analysis = TextBlob(text)
    sentiment = analysis.sentiment.polarity

    if sentiment > 0:
        console.print("[green]‚úÖ Sentiment positif.[/green]")
    elif sentiment < 0:
        console.print("[red]‚ùå Sentiment n√©gatif.[/red]")
    else:
        console.print("[yellow]üî∂ Sentiment neutre.[/yellow]")



def identity_detection():
    """ V√©rifie si un pseudo est utilis√© sur plusieurs sites """
    console.print("[cyan]üé≠ D√©tection d‚Äôidentit√©s multiples[/cyan]")
    username = console.input("üîç Entrez un pseudo : ").strip()

    platforms = [
        f"https://twitter.com/{username}",
        f"https://github.com/{username}",
        f"https://www.instagram.com/{username}/",
        f"https://www.tiktok.com/@{username}",
        f"https://www.reddit.com/user/{username}",
    ]

    for site in platforms:
        response = requests.get(site)
        if response.status_code == 200:
            console.print(f"[green]‚úÖ {username} existe sur {site}[/green]")
        else:
            console.print(f"[red]‚ùå {username} n‚Äôa pas √©t√© trouv√© sur {site}[/red]")

def time_analysis():
    """ Analyse temporelle des tendances et √©v√©nements """
    console.print("[cyan]‚è≥ Time Analysis - Visualisation de l‚Äô√©volution des tendances[/cyan]")

    # Exemple de donn√©es temporelles
    data = {
        "Date": ["2024-01-01", "2024-02-01", "2024-03-01", "2024-04-01"],
        "Mentions": [120, 150, 180, 240]
    }

    df = pd.DataFrame(data)
    df["Date"] = pd.to_datetime(df["Date"])

    plt.figure(figsize=(8,6))
    plt.plot(df["Date"], df["Mentions"], marker='o', linestyle='-', color='blue')
    plt.xlabel("Date")
    plt.ylabel("Nombre de mentions")
    plt.title("√âvolution des tendances au fil du temps")
    plt.grid()
    plt.show()


def social_network_analysis():
    """ Analyse des connexions et influenceurs sur un r√©seau social """
    console.print("[cyan]üìä Analyse avanc√©e des r√©seaux sociaux[/cyan]")
    
    # Exemple de structure de r√©seau social
    G = nx.Graph()
    G.add_edges_from([
        ("Alice", "Bob"),
        ("Bob", "Charlie"),
        ("Charlie", "David"),
        ("David", "Eve"),
        ("Eve", "Alice"),
        ("Alice", "Charlie")
    ])

    plt.figure(figsize=(6,6))
    nx.draw(G, with_labels=True, node_color="skyblue", edge_color="gray", font_weight="bold")
    plt.title("Graphique des connexions sociales")
    plt.show()

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def article_search():
    """ Recherche automatique d‚Äôarticles et sources d‚Äôinformation fiables """
    console.print("[cyan]üåé Recherche automatique d‚Äôarticles sur un sujet[/cyan]")
    query = console.input("üîé Entrez un sujet : ").strip()

    # Recherche sur Wikipedia
    wiki_url = f"https://fr.wikipedia.org/wiki/{query.replace(' ', '_')}"
    try:
        response = requests.get(wiki_url)
        soup = BeautifulSoup(response.text, "html.parser")
        intro = soup.find("p").text
        console.print(f"üìñ Wikipedia : {intro[:300]}...\nüîó {wiki_url}")
    except:
        console.print("‚ùå Impossible d‚Äôextraire Wikipedia.")

    # Recherche sur Google News
    news_url = f"https://www.google.com/search?q={query.replace(' ', '+')}&tbm=nws"
    console.print(f"üì∞ Articles sur Google News : {news_url}")

    # ‚úÖ Ajout correct de la pause pour √©viter le clear imm√©diat
    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")



def ocr_text_extraction():
    """ Extraction de texte depuis une image """
    console.print("[cyan]üñºÔ∏è OCR - Extraction de texte sur image[/cyan]")
    image_path = console.input("üì∑ Entrez le chemin de l‚Äôimage : ").strip()

    text = pytesseract.image_to_string(Image.open(image_path))
    console.print(f"üìù Texte extrait :\n{text}")


def osint_alert_system():
    """ Surveillance d‚Äôun sujet et alertes en temps r√©el (avec option de sortie) """
    console.print("[cyan]üö® OSINT Alert System - Suivi d‚Äôun sujet[/cyan]")
    query = console.input("üîé Entrez un sujet √† surveiller (ou 'q' pour quitter) : ").strip()

    if query.lower() == "q":
        console.print("[red]‚ùå Surveillance annul√©e.[/red]")
        return

    news_url = f"https://www.google.com/search?q={query.replace(' ', '+')}&tbm=nws"

    while True:
        console.print(f"üîç V√©rification des nouvelles infos sur {query}...")
        response = requests.get(news_url)
        soup = BeautifulSoup(response.text, "html.parser")

        first_news = soup.find("h3")
        if first_news:
            console.print(f"‚ö†Ô∏è Nouvelle info : {first_news.text}")
        else:
            console.print("‚ùå Aucune info trouv√©e pour le moment.")

        console.print("\nüõë Tape 'q' et appuie sur Entr√©e pour quitter la surveillance...")
        stop = console.input().strip()
        if stop.lower() == "q":
            console.print("[red]‚ùå Surveillance arr√™t√©e.[/red]")
            break

        time.sleep(600)  # V√©rifie toutes les 10 minutes




def show_good_links():
    print_header()
    console.print("[bold cyan]\n====== Les Bons Liens ======[/bold cyan]\n")

    links = {
        "Anime-Sama": "https://anime-sama.fr/",
        "Xalaflix": "https://xalaflix.io/",
        "Limpaz": "https://www.limpaz.fr/"
    }

    for name, url in links.items():
        console.print(f"üîó {name} : [blue underline]{url}[/blue underline]")

    console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")


def print_pikachu():
    """ Affiche le titre et un Pikachu stylis√© en ASCII """
    console.print(r"""
[bold cyan]
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                          B . V . E . R . L . Y     L . O . V . E                          

[/bold cyan]
[bold green]
      ‚†Ä‚£Ä‚£§‚£§‚£∂‚£∂‚£∂‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä
  ‚†Ä‚†Ä‚£¥‚£ø‚°ø‚†õ‚†â‚†ô‚†õ‚†õ‚†ª‚£ø‚£ø‚£∑‚°Ñ‚†Ä
  ‚¢Ä‚£ø‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚°Ä
  ‚£º‚£ø‚£ø‚†Ä‚†Ä‚£Ä‚£§‚£§‚£§‚£Ñ‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ß                   
  ‚£ø‚£ø‚£ø‚°á‚†Ä‚†ô‚†ª‚†ø‚†ø‚†ã‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø                        
  ‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£§‚£§‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø
  ‚¢ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†õ‚†õ‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø
   ‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â

>> SYSTEM OVERRIDE
>> Injecting payload...
>> EXEC /root/b.verly/hack.sh

‚ïî‚ïê‚ïê‚ïê‚ïó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïî‚ïó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ïë‚ïî‚ïê‚ïó‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïî‚ïù‚ïö‚ïó‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ïë‚ïë‚îÄ‚ïö‚ï¨‚ïê‚ïê‚ï¶‚ïê‚ïê‚ï¶‚ïê‚ïê‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïù‚ïî‚ïó‚ïö‚ï¶‚ïê‚ïê‚ïó
‚ïë‚ïë‚îÄ‚ïî‚ï£‚ïî‚ïó‚ïë‚ïî‚ïó‚ïë‚ïî‚ïó‚ïë‚ïî‚ïó‚ï£‚ïî‚ïó‚ï£‚ïë‚îÄ‚ïë‚ïî‚ïó‚ïë
‚ïë‚ïö‚ïê‚ïù‚ïë‚ïî‚ïó‚ïë‚ïö‚ïù‚ïë‚ïö‚ïù‚ïë‚ïë‚ïë‚ïë‚ïö‚ïù‚ïë‚ïö‚ïê‚ï£‚ïö‚ïù‚ïë
‚ïö‚ïê‚ïê‚ïê‚ï©‚ïù‚ïö‚ï©‚ïê‚ïó‚ï†‚ïê‚ïê‚ï©‚ïù‚ïö‚ï©‚ïê‚ïê‚ï©‚ïê‚ïó‚ï†‚ïê‚ïê‚ïù
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïî‚ïê‚ïù‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïî‚ïê‚ïù‚ïë
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïö‚ïê‚ïê‚ïù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïö‚ïê‚ïê‚ïù


[/bold green]
[bold red]üîç KING KRATORAK - OSINT TOOL üîç[/bold red]
    """)

def main_menu():
    while True:
        clear_console()  # Nettoyage du terminal AVANT d'afficher le menu
        print_pikachu()
        print_header()

        table = Table(title="üé¨ 007 OSINT TOOL MENU", style="cyan", box=box.ROUNDED)
        table.add_column("Num√©ro", justify="center", style="bold yellow")
        table.add_column("Option", justify="left", style="bold magenta")
        table.add_column("Description", style="white")

        options = [
            ("1", "üîé V√©rification multi-r√©seaux sociaux", "Check usernames across social platforms"),
            ("2", "üé• OSINT FILM ET S√âRIE", "Recherche films et s√©ries avec plateformes l√©gales"),
            ("3", "üåê WHOIS & DNS Lookup", "Obtenir infos sur un domaine"),
            ("4", "ü¶† V√©rification URL", "Analyse de site web avec VirusTotal"),
            ("5", "üìç G√©olocalisation IP", "Trouver l'emplacement d'une adresse IP"),
            ("6", "‚ö° IP GENERATOR", "G√©n√®re plusieurs IP et les envoie sur Discord"),
            ("7", "üåç Les Bons Liens", "Acc√®s rapide aux sites utiles"),
            ("8", "üõ° Website Vulnerability Scanner", "Analyse la s√©curit√© d‚Äôun site web"),
            ("9", "üöÄ Nitro Stats", "Analyse le nombre de Nitro Boosters d'un serveur"),
            ("10", "üõ° Discord Token Info", "Affiche des infos d‚Äôun compte Discord"),
            ("11", "üîó Discord Webhook Info", "Affiche des infos d‚Äôun webhook Discord"),
            ("12", "‚öôÔ∏è Discord Webhook Generator", "Permet d‚Äôenvoyer un message avec un webhook"),
            ("13", "üè∞ Discord Server Info", "Affiche les infos d√©taill√©es d‚Äôun serveur via une invitation"),
            ("14", "üíé Nitro Global Stats", "Estimation du nombre de Nitro dans le monde"),
            ("15", "üìä Global Nitro Stat Serveur", "Liste les membres Nitro d'un serveur avec leur rang"),
            ("16", "üåç Cartes interactives", "Visualisation g√©ographique avec points d‚Äôint√©r√™t et heatmaps"),
            ("17", "üîó Graphiques de r√©seau", "Analyse des relations entre individus et organisations"),
            ("18", "üìä Dashboards avec KPIs", "Visualisation chronologique et m√©triques des donn√©es OSINT"),
            ("19", "üìë Data Scraping OSINT", "Extraction automatique d‚Äôinfos publiques sur un sujet"),
            ("20", "üí¨ Sentiment Analysis", "Analyse des √©motions et tendances dans les textes"),
            ("21", "üé≠ D√©tection d‚Äôidentit√©s multiples", "Recherche d‚Äôun pseudo sur plusieurs plateformes"),
            ("22", "üñºÔ∏è OCR (Reconnaissance de texte sur image)", "Extraction de texte depuis une image"),
            ("23", "üö® OSINT Alert System", "Surveillance et alertes sur un sujet cl√©"),
            ("24", "üìä Analyse avanc√©e des r√©seaux sociaux", "D√©tection des influenceurs et connexions entre groupes"),
            ("25", "üåé Recherche automatique d‚Äôarticles", "Trouver et classer les sources d‚Äôinformation fiables"),
            ("26", "‚è≥ Time Analysis", "Suivi de l‚Äô√©volution des tendances et √©v√©nements"),
            ("27", "‚ùå Quitter", "Exit the program"),
        ]

        for num, opt, desc in options:
            table.add_row(num, opt, desc)

        console.print(table)

        choix = console.input("üß† Choisis un num√©ro : ").strip()

        if choix == "1":
            social_check_tool()
        elif choix == "2":
            osint_film_serie()
        elif choix == "3":
            get_domain_info()
        elif choix == "4":
            check_url_vt()
        elif choix == "5":
            get_ip_location()
        elif choix == "6":
            ip_generator()
        elif choix == "7":
            show_good_links()
        elif choix == "8":
            website_vulnerability_scanner()
        elif choix == "9":
            invite_code = console.input("üîó Entrez le code d'invitation du serveur Discord : ").strip()
            get_nitro_boosters(invite_code)
        elif choix == "10":
            discord_token_info()
        elif choix == "11":
            discord_webhook_info()
        elif choix == "12":
            discord_webhook_generator()
        elif choix == "13":
            discord_server_info()
        elif choix == "14":
            get_nitro_global_stats()
        elif choix == "15":
            invite_code = console.input("üîó Entrez l'invitation du serveur Discord : ").strip()
            global_nitro_stat_server(invite_code)
        elif choix == "16":
            create_map()
        elif choix == "17":
            create_network_graph()
        elif choix == "18":
            create_dashboard()
        elif choix == "19":
            data_scraping_osint()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "20":
            sentiment_analysis()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "21":
            identity_detection()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "22":
            ocr_text_extraction()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "23":
            osint_alert_system()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "24":
            social_network_analysis()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "25":
            article_search()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "26":
            time_analysis()
            console.input("\nüîÑ Appuie sur Entr√©e pour revenir au menu...")  # Pause apr√®s ex√©cution
        elif choix == "27":
            console.print("\nüëã √Ä bient√¥t !", style="bold red")
            break
        else:
            console.print("‚ùå Choix invalide, r√©essaie.\n", style="bold red")

if __name__ == "__main__":
    main_menu()
